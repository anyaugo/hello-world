# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
#orbs:
  # Declare a dependency on the welcome-orb
  #welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail
jobs:
  create-and-deploy-front-end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create And Deploy Front End
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name ${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID:0:7}"
      - run: 
          name: Upload index.html File
          command: |
            aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - destroy_environment
  
  get-last-deployment-id:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Get Last Deploymemnt ID
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\'PipelineID\'].Value" \
            --no-paginate --output text >> pipelineid.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "pipelineid.txt"

  promote-to-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Promote to Production
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID:0:7}"

  clean-up-old-front-end:
    docker:
      - image: amazon/aws-cli
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: OldPipelineID=$(cat pipelineid.txt)
      - run:
          name: Clean Up Old Front End
          command: |
            aws s3 rm "s3://${OldPipelineID}" --recursive
            aws cloudformation delete-stack --stack-name "${OldPipelineID}"
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - create-and-deploy-front-end
      - get-last-deployment-id:
          requires:
            - "create-and-deploy-front-end"
      - promote-to-production:
          requires:
            - "get-last-deployment-id"
      - clean-up-old-front-end:
          requires:
            - "promote-to-production"

# jobs:
#   update-ec2-invetory:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run: 
#           name: Create Inventory File
#           command: |
#           touch ~/inventory \
#           echo "[all]" >> ~/inventory
#       - run: 
#           name: Add Instances to Inventory File
#           command: |
#           aws ec2 describe-instances \
#           --query 'Reservations[*].Instances[*].PublicIpAddress' \
#           --filters "Name=tag:Project,Values=Udacity" \
#           --output text >> ~/inventory
#       - save_cache:
#           paths:
#             - ~/inventory
#           key: "inventory file" 
# workflows:
#   # Name the workflow "welcome"
#   welcome:
#     # Run the welcome/run job in its own container
#     jobs:
#       - update-ec2-inventory      
